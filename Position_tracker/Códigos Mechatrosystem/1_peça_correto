import time
from time import sleep
from datetime import datetime


pc = "jf" #mudar para algum outro valor quando for usar o pc do lab
space = "%%"
i = 1 # Escreva aqui para definir o número da peça a ser executado.
jump_param = 70 #Altura do pulo



if (pc=="jf"):
    diretorio = "C:\\Users\\João Fernando Rangel\\Desktop\\Digital Twin\\DEMO_DT\\Position_tracker\\Logs\\log"
else:
    diretorio = "C://Users//Digital Twin//Documents//GitHub//DEMO_DT//Position_tracker//Logs//log"

data_hora_atual = datetime.now()
formato_data_hora = "%Y-%m-%d_%H-%M-%S"
timestamp = data_hora_atual.strftime(formato_data_hora)
diretorio_novo =  diretorio.replace("log", "") + "Logs%%" + timestamp + ".txt"
log = open(diretorio_novo, 'w+')

def update(): 
    global string_garra
    string_garra = "GA"
    pose_info_atual = dType.GetPose(api)  # Supondo que dType.GetPose(api) é uma função válida
    # Verifique se houve uma mudança na pose_info
    data_hora_atual = datetime.now()
    formato_data_hora = "%H-%M-%S"
    timestamp1 = data_hora_atual.strftime(formato_data_hora)
    string = str(round(pose_info_atual[0], 3)) + space + str(round(pose_info_atual[1], 3)) + space + str(
        round(pose_info_atual[2], 3)) + space + str(round(pose_info_atual[3], 3)) + space + string_garra
    string_Print = str(timestamp1) + space + string  + "\n"
    log.write(string_Print)    
    # Crie um novo arquivo com o nome baseado na string escrita e na hora de criação
    novo_arquivo = diretorio + space + timestamp1 + space + string.replace(" ", "_") + ".txt"
    with open(novo_arquivo, "w+") as x:
        x.write(string_Print)
        print('posicao escrita')
    # Atualize a pose_info_anterior
    time.sleep(1)
#Magician

ponto_esteira = [112.4975, -173.3186, 31.5026, -84]
home = [223.0752, 0, 40, 0]
montagem = [283.6386 ,2.3481 , 40.2573 , 0]
montagemtampa = [282.6386, 2.3481, 58.2095, 0]
insere = [284.9474, 0, 67.6, 2.34]
retirapronta = [283.9509, 2.5633, 33.5151, 0]


Tampa = [[183.6411 ,24.0021 , 23.5616 , 0],[183.6411 ,23.0042 , 23.5616 , 0],[183.6411 ,-21.4659, 23.5616 , 0],
         [183.6411 ,-67.1619, 23.5616 , 0],[232.0508 ,-66.8023, 23.5616 , 0],[232.0508 ,-21.1304, 23.5616 , 0],
         [232.0508 ,25.8537 , 23.5616 , 0],[232.0508 ,72.4578 , 23.5616 , 0]]
#Tampa = [tampa1, tampa2, tampa3, 
#       tampa4, tampa5, tampa6, 
#       tampa7, tampa8]

Peca = [[182.6844, 176.227, 32, 90],[182.6844, 176.227, 32, 90],[137.7952, 172.4430, 32, 90],
        [137.7952, 220.3223, 32, 90],[92.6271, 171.2893, 32, 90],[92.6273, 218.0526, 32, 90],
        [48.1435, 169.1429, 32, 90],[48.1435, 216.7334, 32, 90]]
#Peça = [peça1, peça2, peça3, 
#      peça4, peça5, peça6, 
#       peça7, peça8]

Azul = [[-79.5677, -160.7236,   20, -90],[-79.5677, -209.3841,  20, -90],[-79.5677, -181.0164,  20, -90],
        [-79.5677, -154.5198 ,  20, -90],[-111.9670, -163.0784, 20, -90],[-111.9670, -188.0164, 20, -90],
        [-111.9670, -216.3841, 20, -90],[-111.9670, -244.3888, 20, -90]]
#Azul = [azul1, azul2, azul3
#       azul4, azul5, azul6
#       azul7, azul8]

Vermelha = [[-11.3838, -241.7262, 20, -90], [-11.3838, -214.2232, 20, -90], [-11.3838, -187.9678, 20, -90],
            [-11.3838, -160, 20, -90],[-44.1676, -160, 20, -90],[-44.1676, -187.9678, 20, -90],
            [-44.1676, -214.2232, 20, -90],[-44.1676, -241.7262,  20, -90]]
#Vermelha = [vermelha1, vermelha2, vermelha3
#            vermelha4, vermelha5, vermelha6
#            vermelha7, vermelha8]

def jump(ponto): #função que substitui o modo jump.
    global jump_param
    pose_atual = dType.GetPose(api)
    update()
    dType.SetPTPCmdEx(api, 1, (pose_atual[0]), (pose_atual[1]), jump_param, (pose_atual[3]), 1)
    update()
    dType.SetPTPCmdEx(api, 1, (ponto[0]), (ponto[1]), jump_param, (ponto[3]), 1)
    update()
    dType.SetPTPCmdEx(api, 1, (ponto[0]), (ponto[1]), (ponto[2]), (ponto[3]), 1)
    update()

def posicoes():
  global ponto_esteira
  global home
  global montagem  
  global Tampa
  global Peca
  global Azul
  global Vermelha
  global insere
  global montagemtampa
  global retirapronta

def abregarra():
    dType.SetWAITCmdEx(api, 500, 1)
    dType.SetEndEffectorGripperEx(api, 1, 0)
    dType.SetWAITCmdEx(api, 500, 1)
    string_garra = "GA"

def fechagarra():
    dType.SetWAITCmdEx(api, 500, 1)
    dType.SetEndEffectorGripperEx(api, 1, 1)
    dType.SetWAITCmdEx(api, 500 ,  1)
    string_garra = "GF"

def configura():
	global aprox
	aprox = 30
	dType.SetIOMultiplexingEx(api, 19, 3, 1)
	dType.SetIOMultiplexingEx(api, 20, 3, 1)
	dType.SetIOMultiplexingEx(api, 7, 3, 1)
	dType.SetIOMultiplexingEx(api, 4, 3, 1)
	dType.SetIOMultiplexingEx(api, 5, 3, 1)
	dType.SetIOMultiplexingEx(api, 18, 1, 1)#Pistão A
	dType.SetIOMultiplexingEx(api, 14, 1, 1)#Pistao B
	dType.SetIOMultiplexingEx(api, 15, 1, 1)#Pistão C
	dType.SetIOMultiplexingEx(api, 6, 1, 1)#Pistão D
	dType.SetIOMultiplexingEx(api, 13, 1, 1)#Motor vertical
	dType.SetIOMultiplexingEx(api, 17, 1, 1)#Esteira 1
	dType.SetIOMultiplexingEx(api, 2, 1, 1)#Esteira 2
	dType.SetIOMultiplexingEx(api, 13, 1, 1)

def alimenta():
	dType.SetWAITCmdEx(api, 0.5, 1)
	dType.SetIODOEx(api, 18, 1, 1)
	dType.SetIODOEx(api, 17, 1, 1)

	while (dType.GetIODI(api, 20)[0]) == 0:
		#print ("teste1")
		dType.SetWAITCmdEx(api, 0.3, 1)

	dType.SetIODOEx(api, 18, 0, 1)

	while (dType.GetIODI(api, 19)[0]) == 0:
		#print ("teste2")
		dType.SetWAITCmdEx(api, 0.3, 1)
		
def transporta():
    dType.SetIODOEx(api, 17, 1, 1)

    while (dType.GetIODI(api, 5)[0]) == 0:
        dType.SetWAITCmdEx(api, 0.5, 1)
    
    dType.SetIODOEx(api, 17, 0, 1)
    dType.SetWAITCmdEx(api,1000,1)
    dType.SetIODOEx(api, 14, 1, 1)

    while (dType.GetIODI(api, 7)[0]) == 0:
        dType.SetWAITCmdEx(api, 0.5, 1)

    dType.SetIODOEx(api, 14, 0, 1)
    dType.SetWAITCmdEx(api, 3, 1)

    dType.SetIODOEx(api, 6, 1, 1)
    dType.SetIODOEx(api, 13, 1, 1)

    dType.SetWAITCmdEx(api, 4000, 1)

    dType.SetIODOEx(api, 6, 0, 1)
    dType.SetIODOEx(api, 13, 0, 1)

    dType.SetWAITCmdEx(api, 5, 1)
    dType.SetWAITCmdEx(api,1500,1)
    dType.SetIODOEx(api, 15, 1, 1)

    while (dType.GetIODI(api, 4)[0]) == 0:
        dType.SetWAITCmdEx(api, 500, 1)

    dType.SetIODOEx(api, 15, 0, 1)
    dType.SetWAITCmdEx(api, 2000, 1)
    dType.SetIODOEx(api, 2, 1, 1)

    dType.SetWAITCmdEx(api,5000,1)
    dType.SetIODOEx(api, 2, 0, 1)

def pegaesteira():
    update()
    dType.SetPTPCmdEx(api, 0, (ponto_esteira[0]), (ponto_esteira[1]), (ponto_esteira[2] + aprox), (ponto_esteira[3]), 1)
    update()
    dType.SetPTPCommonParamsEx(api, 5, 5, 1)
    dType.SetPTPCmdEx(api, 1, (ponto_esteira[0]), (ponto_esteira[1]), (ponto_esteira[2]), (ponto_esteira[3]), 1)
    update()
    fechagarra()
    dType.SetPTPCmdEx(api, 1, (ponto_esteira[0]), (ponto_esteira[1]), (ponto_esteira[2] + aprox), (ponto_esteira[3]), 1)
    update()
    dType.SetWAITCmd(api, 500, isQueued=1)

def colocamontagem():
    dType.SetPTPCommonParamsEx(api,50,50,1)
    update()
    dType.SetPTPCmdEx(api,0,(montagem[0]),(montagem[1]),(montagem[2] + aprox),(montagem[3]),1)
    update()
    dType.SetPTPCommonParamsEx(api,5,5,1)
    update()
    dType.SetPTPCmdEx(api,1,(montagem[0]),(montagem[1]),(montagem[2]),(montagem[3]),1)
    update()
    abregarra()
    update()
    dType.SetPTPCommonParamsEx(api,20,20,1)
    dType.SetPTPCmdEx(api,1,(montagem[0]),(montagem[1]),(montagem[2] + aprox),(montagem[3]),1)
    update()

def pegatampa(numero): #substitui todas as funções de pegar a tampa
    dType.SetPTPCmdEx(api,1,216.83,1.16,81.81,0,1)
    update()
    dType.SetPTPCommonParamsEx(api,30,30,1)
    update()
    dType.SetPTPCmdEx(api,1,(Tampa[0]),(Tampa[1]) ,(Tampa[2] + 20),(Tampa[3]),1)
    dType.SetPTPCmdEx(api,1,(Tampa[numero-1][0]),(Tampa[numero-1][1]) ,(Tampa[numero-1][2] + 20),(Tampa[numero-1][3]),1)
    update()
    dType.SetPTPCommonParamsEx(api,10,10,1)
    update()
    dType.SetPTPCmdEx(api,2,(Tampa[numero-1][0]),(Tampa[numero-1][1]),(Tampa[numero-1][2]),(Tampa[numero-1][3]),1)
    update()
    fechagarra()
    update()
    dType.SetPTPCmdEx(api,2,(Tampa[numero-1][0]),(Tampa[numero-1][1]) ,(Tampa[numero-1][2] + aprox),(Tampa[numero-1][3]),1)
    update()
	
def montatampa():
    update()
    jump(montagemtampa)
    #dType.SetPTPCmdEx(api,1,(montagemtampa[0]),(montagemtampa[1]),(montagemtampa[2] + aprox),(montagemtampa[3]),1)
    update()
    dType.SetPTPCommonParamsEx(api,10,10,1)
    update()
    dType.SetPTPCmdEx(api,1,(montagemtampa[0]),(montagemtampa[1]),(montagemtampa[2]),(montagemtampa[3]),1)
    update()
    abregarra()
    update()
    dType.SetPTPCmdEx(api,1,(montagemtampa[0]),(montagemtampa[1]),(montagemtampa[2] + aprox),(montagemtampa[3]),1)
    update()

def Guarda(numero):	
    dType.SetPTPCmdEx(api,1,(retirapronta[0]),(retirapronta[1]),(retirapronta[2] + aprox),(retirapronta[3]),1)
    update()
    dType.SetPTPCommonParamsEx(api,10,10,1)
    update()
    dType.SetPTPCmdEx(api,2,(retirapronta[0]),(retirapronta[1]),(retirapronta[2]),(retirapronta[3]),1)
    update()
    fechagarra()
    update()
    dType.SetPTPCmdEx(api,2,(retirapronta[0]),(retirapronta[1]),(retirapronta[2] + aprox),(retirapronta[3]),1)
    update()
    dType.SetPTPCommonParamsEx(api,50,50,1)
    update()
    dType.SetPTPCmdEx(api,1,183.01,173.12,118,Peca[numero - 1][3],1)
    update()
    dType.SetPTPCmdEx(api,1,(Peca[numero - 1][0]),(Peca[numero - 1][1]) ,118, (Peca[numero - 1][3]),1)
    update()
    dType.SetPTPCmdEx(api,1,(Peca[numero - 1][0]),(Peca[numero - 1][1]) ,(Peca[numero - 1][2]+10), (Peca[numero - 1][3]),1)
    update()
    dType.SetPTPCommonParamsEx(api,10,10,1)
    update()
    dType.SetPTPCmdEx(api,2,(Peca[numero - 1][0]),(Peca[numero - 1][1]),(Peca[numero - 1][2]),(Peca[numero - 1][3]),1)
    update()
    abregarra()
    update()
    dType.SetPTPCmdEx(api,2,(Peca[numero - 1][0]),(Peca[numero - 1][1]) ,80,(Peca[numero - 1][3]),1)
    update()

def pegaazul(numero):
    update()
    dType.SetPTPCmdEx(api,1 ,35 ,-186.3 ,94, -69 ,1)
    update()
    dType.SetPTPCommonParamsEx(api,20,20,1)	
    update()
    dType.SetPTPCmdEx(api,1,(Azul[numero-1][0]),(Azul[numero-1][1]),(Azul[numero-1][2] + 10),Azul[numero-1][3],1)
    update()
    dType.SetPTPCommonParamsEx(api,5,5,1)
    update()
    dType.SetPTPCmdEx(api,2,(Azul[numero-1][0]),(Azul[numero-1][1]),(Azul[numero-1][2]),Azul[numero-1][3],1)
    update()
    fechagarra()	
    update()
    dType.SetPTPCmdEx(api,2,(Azul[numero-1][0]),(Azul[numero-1][1]),(Azul[numero-1][2] + 15),Azul[numero-1][3],1)	
    update()
    dType.SetPTPCmdEx(api,1 ,35 ,-186.3 ,94, -69 ,1)
    update()
    dType.SetPTPCommonParamsEx(api,20,20,1)
    dType.SetPTPCmdEx(api,1,home[0],home[1],home[2],home[3],1)
    update()
    dType.SetPTPCommonParamsEx(api,5,5,1)
    #função jump
    dType.SetPTPCmdEx(api,0,(insere[0]),(insere[1]),(insere[2] ),insere[3],1)
    update()
    abregarra()
    update()

def pegavermelha(numero):
    update()
    dType.SetPTPCommonParamsEx(api,50,50,1)
    update()
    dType.SetPTPCmdEx(api,1 ,35 ,-186.3 ,94, -69 ,1)
    update()
    dType.SetPTPCmdEx(api,1,(Vermelha[numero-1][0]),(Vermelha[numero-1][1]),(Vermelha[numero-1][2] + 10),Vermelha[numero-1][3],1)
    update()
    dType.SetPTPCommonParamsEx(api,10,10,1)
    update()
    dType.SetPTPCmdEx(api,2,(Vermelha[numero-1][0]),(Vermelha[numero-1][1]),(Vermelha[numero-1][2]),Vermelha[numero-1][3],1)
    update()
    fechagarra()
    update()
    dType.SetPTPCmdEx(api,2,(Vermelha[numero-1][0]),(Vermelha[numero-1][1]),(Vermelha[numero-1][2] + 10),Vermelha[numero-1][3],1)
    update()
    dType.SetPTPCmdEx(api,1 ,35 ,-186.3 ,94, -69 ,1)
    update()
    dType.SetPTPCmdEx(api,1,home[0],home[1],home[2],home[3],1)
    update()
    dType.SetPTPCmdEx(api,1,(insere[0]),(insere[1]),(insere[2] ),insere[3],1)
    update()
    abregarra()
    update()

configura()
posicoes()
abregarra()

dType.SetPTPCommonParamsEx(api,50,50,1)
dType.SetPTPCmdEx(api,1,(home[0]),(home[1]),(home[2] + aprox),(home[3]),1)



#########começo do programa	######

alimenta()
transporta()
pegaesteira()
colocamontagem()
pegaazul(i)
pegavermelha(i)
pegatampa(i)
montatampa()
Guarda(i)


dType.SetPTPCmdEx(api,1,(home[0]),(home[1]),(home[2] + aprox),(home[3]),1)

dType.SetEndEffectorGripper(api, 0,  0, 1)